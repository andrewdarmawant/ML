# -*- coding: utf-8 -*-
"""LHD Share.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gtylVA0Rh6rAFUrRpm_u4glVwk3Bmt_-
"""

import math
import pandas_datareader as web
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
import matplotlib.pyplot as plt
from tensorflow.keras.layers import LSTM
from tensorflow.keras.layers import Dense
plt.style.use('fivethirtyeight')

# Get Some Data
df = web.DataReader('AAPL', data_source='yahoo', start ='2010-01-01', end='2021-03-03')
df

# plot some stuff
plt.figure(figsize=(16,8))
plt.title("Price History")
plt.xlabel("Time", fontsize = 18)
plt.ylabel("Price", fontsize = 18)
plt.plot(df['Close'])
plt.show()

# Filter to just close column
data = df.filter(['Close'])
#Convert data to numpy array
dataset = data.values
training_len = math.ceil(len(dataset) * 0.8)

#Scale data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(dataset)

scaled_data

#Create Training Data
train_data = scaled_data[0:training_len, :]

x_train = []
y_train = []

for i in range(60, training_len):
  x_train.append(train_data[i-60: i, 0]) #Get the data in the past 60 days for each iteration
  y_train.append(train_data[i, 0]) #get the data of that day

  if i <= 60:
    print(x_train)
    print(y_train)
    print()

#Convert Numpy
x_train, y_train = np.array(x_train), np.array(y_train)


#Reshape out Data
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))


#Build our LSTM Model
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(x_train.shape[1], 1)))
model.add(LSTM(50, return_sequences=False))

#Density Connected NN
model.add(Dense(30))
model.add(Dense(1))

#Compile our Model
model.compile(optimizer='adam', loss="mean_squared_error")

model.fit(x_train, y_train, batch_size = 1, epochs=10)

test_data = scaled_data[training_len-60:, : ]

x_test = []
y_test = dataset[training_len:, :]

for i in range(60, len(test_data)):
  x_test.append(test_data[i-60:i, :])

#Reshape and covert to numpy
x_test = np.array(x_test)
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

#Get Predictions
pred = model.predict(x_test)
print(pred)
pred = scaler.inverse_transform(pred)
print(pred)

#See total error from prediction

rmse = np.sqrt( np.mean(pred - y_test)**2)
rmse

# Set up a plot data
train = data[:training_len]
expected = data[training_len:]
expected['Predictions'] = pred

#Visualize output
plt.figure(figsize=(16,8))
plt.title("Price History")
plt.xlabel("Time", fontsize = 18)
plt.ylabel("Price", fontsize = 18)
plt.plot(train['Close'])
plt.plot(expected[['Close', 'Predictions']])
plt.legend(["Training Value", "Expected Value", "Predictied Value"])
plt.show()

